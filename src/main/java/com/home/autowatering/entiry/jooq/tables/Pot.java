/*
 * This file is generated by jOOQ.
 */
package com.home.autowatering.entiry.jooq.tables;


import com.home.autowatering.entiry.jooq.DefaultSchema;
import com.home.autowatering.entiry.jooq.Indexes;
import com.home.autowatering.entiry.jooq.Keys;
import com.home.autowatering.entiry.jooq.tables.records.PotRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.5"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Pot extends TableImpl<PotRecord> {

    /**
     * The reference instance of <code>pot</code>
     */
    public static final Pot POT = new Pot();
    private static final long serialVersionUID = -2078356751;
    /**
     * The column <code>pot.id</code>.
     */
    public final TableField<PotRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pot.code</code>.
     */
    public final TableField<PotRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>pot.code</code>.
     */
    public final TableField<PotRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>pot.code</code>.
     */
    public final TableField<PotRecord, Integer> MIN_HUMIDITY = createField("min_humidity", SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>pot.code</code>.
     */
    public final TableField<PotRecord, Integer> CHECK_INTERVAL = createField("check_interval", SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>pot.code</code>.
     */
    public final TableField<PotRecord, Integer> WATERING_DURATION = createField("watering_duration", SQLDataType.INTEGER.nullable(false), this, "");


    /**
     * Create a <code>pot</code> table reference
     */
    public Pot() {
        this(DSL.name("pot"), null);
    }

    /**
     * Create an aliased <code>pot</code> table reference
     */
    public Pot(String alias) {
        this(DSL.name(alias), POT);
    }

    /**
     * Create an aliased <code>pot</code> table reference
     */
    public Pot(Name alias) {
        this(alias, POT);
    }

    private Pot(Name alias, Table<PotRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pot(Name alias, Table<PotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Pot(Table<O> child, ForeignKey<O, PotRecord> key) {
        super(child, key, POT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PotRecord> getRecordType() {
        return PotRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_POT_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PotRecord> getPrimaryKey() {
        return Keys.PK_POT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PotRecord>> getKeys() {
        return Arrays.<UniqueKey<PotRecord>>asList(Keys.PK_POT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pot as(String alias) {
        return new Pot(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pot as(Name alias) {
        return new Pot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pot rename(String name) {
        return new Pot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pot rename(Name name) {
        return new Pot(name, null);
    }
}
