/*
 * This file is generated by jOOQ.
 */
package com.home.autowatering.entity.jooq.tables;


import com.home.autowatering.entity.jooq.DefaultSchema;
import com.home.autowatering.entity.jooq.Indexes;
import com.home.autowatering.entity.jooq.Keys;
import com.home.autowatering.entity.jooq.tables.records.PotStateRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.5"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PotState extends TableImpl<PotStateRecord> {

    /**
     * The reference instance of <code>pot_state</code>
     */
    public static final PotState POT_STATE = new PotState();
    private static final long serialVersionUID = -1651681055;
    /**
     * The column <code>pot_state.id</code>.
     */
    public final TableField<PotStateRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pot_state.date</code>.
     */
    public final TableField<PotStateRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");
    /**
     * The column <code>pot_state.potHumidity</code>.
     */
    public final TableField<PotStateRecord, Double> HUMIDITY = createField("potHumidity", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");
    /**
     * The column <code>pot_state.pot_id</code>.
     */
    public final TableField<PotStateRecord, Long> POT_ID = createField("pot_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>pot_state</code> table reference
     */
    public PotState() {
        this(DSL.name("pot_state"), null);
    }

    /**
     * Create an aliased <code>pot_state</code> table reference
     */
    public PotState(String alias) {
        this(DSL.name(alias), POT_STATE);
    }

    /**
     * Create an aliased <code>pot_state</code> table reference
     */
    public PotState(Name alias) {
        this(alias, POT_STATE);
    }

    private PotState(Name alias, Table<PotStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private PotState(Name alias, Table<PotStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PotState(Table<O> child, ForeignKey<O, PotStateRecord> key) {
        super(child, key, POT_STATE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PotStateRecord> getRecordType() {
        return PotStateRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_POT_STATE_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PotStateRecord> getPrimaryKey() {
        return Keys.PK_POT_STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PotStateRecord>> getKeys() {
        return Arrays.<UniqueKey<PotStateRecord>>asList(Keys.PK_POT_STATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PotState as(String alias) {
        return new PotState(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PotState as(Name alias) {
        return new PotState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PotState rename(String name) {
        return new PotState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PotState rename(Name name) {
        return new PotState(name, null);
    }
}
