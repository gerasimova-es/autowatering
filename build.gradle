buildscript {
    ext.kotlin_version = '1.3.10' // Required for Kotlin integration
    ext.spring_boot_version = '2.1.0.RELEASE'
    ext.jooq_version = '3.11.7'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        // See https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

//newer method of applying plugins, and they must be available in the Gradle plugin repository
//does not work in multi-project configurations (subprojects, allprojects), but will work on the build configuration for each child project.
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
    id 'war'
    id 'nu.studer.jooq' version '3.0.2' //latest version
}

//more flexible method of adding a plugin to your build.
apply plugin: 'kotlin' // Required for Kotlin integration
apply plugin: "kotlin-spring" // https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'com.home.growing'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-snapshot" }
    jcenter()
}

dependencies {
    //kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //spring boot
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.springframework.boot:spring-boot-devtools"
    testCompile('org.springframework.boot:spring-boot-starter-test')

    //db
//    compile "com.h2database:h2"
    compile("org.jooq:jooq:$jooq_version")
    compile('org.xerial:sqlite-jdbc:3.25.2')
    compile('com.zsoltfabok:sqlite-dialect:1.0')
//    compile('org.hibernate.dialect:sqlite-dialect:0.1.0')
    jooqRuntime("org.xerial:sqlite-jdbc:3.25.2")

    //tests
    testCompile(group: 'junit', name: 'junit', version: '4.12')
//    testCompile(group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta')
    testCompile(group: 'com.nhaarman.mockitokotlin2', name: 'mockito-kotlin', version: '2.0.0')

    //Для java 11
    compile('javax.xml.bind:jaxb-api:2.3.0')
    compile('javax.activation:activation:1.1')
    compile('org.glassfish.jaxb:jaxb-runtime:2.3.0')

    //other
    compile('commons-lang:commons-lang:2.6')
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

//jooq {
//    version = '3.11.7' //replace with placeholer
////    edition = 'OSS'
//    sample(sourceSets.main) {
//        jdbc {
//            driver = 'org.sqlite.JDBC'
//            url = 'jdbc:sqlite:C:\\work\\repo\\autowatering\\src\\main\\resources\\db\\autowatering.db'
////            user = ''
////            password = ''
//        }
//        generator {
//            name = 'org.jooq.codegen.DefaultGenerator'
//            strategy {
//                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
//            }
//            database {
//                name = 'org.jooq.meta.sqlite.SQLiteDatabase'
//            }
//            generate {
//                relations = true
//                deprecated = false
//                records = true
//                immutablePojos = true
//                fluentSetters = true
//            }
//            target {
//                packageName = 'com.home.autowatering.entity'
//                directory = 'src/main/kotlin/com/home/autowatering/entity'
//            }
//        }
//    }
//}

